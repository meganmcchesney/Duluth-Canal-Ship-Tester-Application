using System;
using System.Globalization;
using ShipTester.Helper;
using ShipTester.Model;
using System.Collections.Generic;

namespace ShipTester
{
    public static class ShipTestProcessor
    {
        public static void Execute(IEnumerable<ShipTest> shipTests)
        {
            foreach (var shipTest in shipTests)
                Update(shipTest);
        }

        private static void Update(ShipTest shipTest)
        {

            //timestamp for when a ship first reports a position inside the harbor
            shipTest.CanalEntryTimestamp = MarkShipEvent(shipTest);
            
            //distance (in miles) that a ship is from the lift bridge
            //is the distance returned really in miles? Verify this.
            var distanceToCanal =
                        shipTest.DirectDistanceToLiftBridge =
                            Helper.GeoHelper.DistanceBetweenCoord(ShipPositions.AerialLiftBridge, shipTest.Position);
            //only tracking ships that report as underway
            if (shipTest.NavigationalStatus == NavigationalStatus.Underway)
            {
                Position[] TwoNearestPorts = TwoNearestPortsByBearing(shipTest, new Position[] { Ports.Duluth, Ports.Superior, Ports.TwoHarbors, Ports.SilverBay });
                //for ships inside the Duluth Harbor
                if (shipTest.Position.Longitude < -92.00000 && shipTest.CanalEntryTimestamp != null)
                {  
                    //if ship is in St. Louis Bay, we treat it differently than if it is anywhere else in the harbor
                    if (IsBoatInStLouisBayZone(shipTest))
                    {
                        DeriveEtaFromStLouisBay(shipTest);
                    }
                    else
                    {
                        var DuluthSuperiorPorts = new[] { Ports.Duluth, Ports.Superior };
                        var port = NearestPortByBearing(shipTest, DuluthSuperiorPorts);
                        if (port.Equals(Ports.Duluth))
                        {
                            DeriveEta(shipTest, port);
                        }
                    }
                }
                    //for ships outside the Duluth harbor
                else
                {

                    //max receiver range or when shipping lanes start to form, this is up for debate
                    if (distanceToCanal <= 150)
                    {
                        //determine if a ship's reported destination is possibly valid.
                        if (shipTest.Destination.Equals(Ports.Duluth) && ConfirmHeading(shipTest, TwoNearestPorts))
                        {
                            DeriveEta(shipTest, Ports.Duluth);
                        }
                        else if (shipTest.Destination.Equals(Ports.Superior) && TwoNearestPorts[0].Equals(Ports.Duluth))
                        {
                            DeriveEta(shipTest, Ports.Duluth);
                        }
                        else if(TwoNearestPorts[0].Equals(Ports.Duluth))
                        {
                            DeriveEta(shipTest, Ports.Duluth);
                        }
                    }
                    //ship is outside receiver range
                    else
                    {
                        shipTest.DerivedEta = shipTest.Eta;
                    }
                }
            }

            if //ship is not insides harbor, stated destination is Duluth and the heading is less than 90 degrees difference or
               (!shipTest.IsInDuluthSuperiorPort() && shipTest.Destination.Equals(Ports.Duluth)  && shipTest.IsHeadingToward(shipTest.Destination) ||
                //ship heading is less that 90 degrees from Duluth heading and more than 90 degrees from stated destination
                (shipTest.IsHeadingToward(Ports.Duluth) && !shipTest.IsHeadingToward(shipTest.Destination)) ||
                //current ship position is in SLuBay
                (shipTest.IsInStLouisBay())  ||
                //ship is in the harbor, not in SLuBay, and heading towards Duluth canal
                (shipTest.IsInDuluthSuperiorPort() && !shipTest.IsInStLouisBay() && shipTest.IsHeadingToward(Ports.Duluth)) ||
                //outside receiver zone
                (distanceToCanal > 50 && shipTest.Destination.Equals(Ports.Duluth)))
                {
                    shipTest.DuluthCanalETAResult = DuluthCanalETAResult.Calculated;
                }

        }

        /// <summary>
        /// Assesses the validity of a ships reported destination. The ships heading must be within the destinationBearing + or - 2/3 the change in heading between the two nearest ports.
        /// </summary>
        /// <param name="shipTest"></param>
        /// <param name="ports">Should only pass in the twoNearestPortsByBearing</param>
        /// <returns>True if we believe the ships destination</returns>
        private static bool ConfirmHeading(ShipTest shipTest, Position[] ports)
        {
            var destinationBearing = GeoHelper.GetHeading(shipTest.Position, shipTest.Destination);
            var portBearing0 = GeoHelper.GetHeading(shipTest.Position, ports[0]);
            var portBearing1 = GeoHelper.GetHeading(shipTest.Position, ports[1]);
            var portDiff = Math.Abs(portBearing0 - portBearing1);
            var bearingVariance = 2 * portDiff / 3;

            if (destinationBearing >= shipTest.Heading - portDiff && destinationBearing <= shipTest.Heading + portDiff)
            {
                return true;
            }
            else return false;
        }

        //returns the timestamp of when a ship first reports a position Inside Harbor. Timestamp is only set if there is
        //no timestamp. Timestamp is set to null as soon as the ship leaves.
        private static DateTime? MarkShipEvent(ShipTest shipTest)
        {
            if (GeoHelper.IsPointInPolygon(shipTest.Position, Areas.InsideHarbor) && shipTest.CanalEntryTimestamp == null)
            {
                shipTest.CanalEntryTimestamp = DateTime.Now;
            }
            else
            {
                shipTest.CanalEntryTimestamp = null;
            }
            return shipTest.CanalEntryTimestamp;
        }

        //returns boolean InStLouisBayZone
        private static bool IsBoatInStLouisBayZone(ShipTest shipTest)
        {
            bool InStLouisBayZone = GeoHelper.IsPointInPolygon(shipTest.Position, Areas.StLouisBay);
            return InStLouisBayZone;
        }

        //returns DerivedEta of a ship in St. Louis Bay
        private static void DeriveEtaFromStLouisBay(ShipTest shipTest)
        {
            //to calculate DerivedEta from SLuBay, 
            //first, ensure ship is heading out of SLuBay
            //bool DoesShipHaveHeadingToExit = true;
            //if (180 < shipTest.Heading < 290)
            //{
            //    bool DoesShipHaveHeadingToExit = false;
            //}
            //if (DoesShipHaveHeadingToExit)
            //{
            //first, calculate the direct distance to the canal and use it as the hypotenuse of a 30/60/90 triangle
            var directLineDistance =
                Helper.GeoHelper.DistanceBetweenCoord(ShipPositions.AerialLiftBridge, shipTest.Position);
            //next, find lengths of the opposite and adjacent sides (convert angle to radians)
            var shipSideDistance = (directLineDistance * (Math.Sin(60 * Math.PI / 180)));
            var canalSideDistance = (directLineDistance * (Math.Cos(60 * Math.PI / 180)));
            //last, d=rt provides time to travel in hours
            var travelTime = (shipSideDistance + canalSideDistance) / shipTest.Speed;

            shipTest.DerivedEta = AdjustForTravelTime(travelTime);
            shipTest.DuluthCanalETAResult = DuluthCanalETAResult.Calculated;

            //}
        }

        //evaluates ship headings for nearest port
        private static void DeriveEta(ShipTest shipTest, Position port)
        {
            var directLineDistance = Helper.GeoHelper.DistanceBetweenCoord(ShipPositions.AerialLiftBridge, shipTest.Position);
            var travelTime = directLineDistance / shipTest.Speed;
            shipTest.DerivedEta = AdjustForTravelTime(travelTime);
            shipTest.DuluthCanalETAResult = DuluthCanalETAResult.Calculated;
        }

        private static DateTime? AdjustForTravelTime(Double travelTime)
        {
            //use time (in hours) added to current time and account for data lag (4 minutes)
            double total = travelTime + .067;
            DateTime dateTime = DateTime.Now;

            return dateTime.AddHours(total);
        }

        private static Position NearestPortByBearing(ShipTest shipTest, Position[] ports)
        {
            Position NearestPort = null;
            double leastDifferential = 361;
            foreach(Position port in ports)
            {
                double currentDifferential = CalculateDifferential(GeoHelper.GetHeading(shipTest.Position, port), shipTest.Heading);
                if( currentDifferential <= leastDifferential){
                    leastDifferential = currentDifferential;
                    NearestPort = port;
                }
            }
            return NearestPort;
        }

        private static Position[] TwoNearestPortsByBearing(ShipTest shipTest, Position[] ports)
        {
            Position NearestPort = null;
            Position SecondNearestPort = null;
            double leastDifferential = 361;
            double secondLeastDifferential = 361;

            foreach (Position port in ports)
            {
                double currentDifferential = CalculateDifferential(GeoHelper.GetHeading(shipTest.Position, port), shipTest.Heading);
                if (currentDifferential <= secondLeastDifferential)
                {
                    if (currentDifferential <= leastDifferential)
                    {
                        secondLeastDifferential = leastDifferential;
                        SecondNearestPort = NearestPort;
                        leastDifferential = currentDifferential;
                        NearestPort = port;
                    }
                    else
                    {
                        secondLeastDifferential = currentDifferential;
                        SecondNearestPort = port;
                    }
                    
                }
            }

            shipTest.NearestPortByBearing = NearestPort;
            shipTest.SecondNearestPortByBearing = SecondNearestPort;

            return new Position[] { NearestPort, SecondNearestPort };
        }

        //given two angles, returns the smaller angle between them
        private static double CalculateDifferential(double bearing, double heading)
        {
            double differential = bearing - heading;
            if( differential > 180 )
            {
                differential -= 360;
            }
            else if (differential <= -180)
            {
                differential += 360;
            } 
        
            return Math.Abs(differential);
        }
    }
}