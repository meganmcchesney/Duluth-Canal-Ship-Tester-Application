// <copyright file="Polygon.cs" company="Saturn Systems">
// ShipTester, ShipTester
// by
// Saturn Systems, 04/09/2014
// Megan McChesney
// </copyright>
using System;
using System.Collections.Generic;

namespace ShipTester.Model
{

    /// <summary>
    /// A polygon represents an area defined by an array of positions. This implementation by Patrick Mullen
    /// is useful when you have many points that need to be tested against the same polygon. For efficiency
    /// purposes please make the polygon convex.
    /// </summary>
    public class Polygon
    {
        public string Name { get; protected set; }
        public int PolySides { get; protected set; }
        public IList<float> PolyX { get; protected set; }
        public IList<float> PolyY { get; protected set; }
        public float[] Constant { get; protected set; }
        public float[] Multiple { get; protected set; }

        public Polygon(string name, Position[] positions )
        {
            Name = name;
            //the amount of corners the polygon has
            PolySides = positions.Length;
            
            //Constant = new float[positions.Length];
            //Multiple = new float[positions.Length];

            PolyX = new List<float>();
            PolyY = new List<float>();

            foreach (Position pos in positions)
            {
                PolyX.Add((float)pos.Longitude);
                PolyY.Add((float)pos.Latitude);
            }

            //precalc_values();
        }

        //patrick mullen implementation, has cases where the algorithm is incorrect
        //void precalc_values()
        //{
        //    int i, j = PolySides - 1;
        //    for (i = 0; i < PolySides; i++)
        //    {
        //        if (PolyY[j] == PolyY[i])
        //        {
        //            Constant[i] = PolyX[i];
        //            Multiple[i] = 0;
        //        }
        //        else
        //        {
        //            Constant[i] = PolyX[i] - (PolyY[i] * PolyX[j]) / (PolyY[j] - PolyY[i]) + (PolyY[i] * PolyY[i]) / (PolyY[j] - PolyY[i]);
        //            Multiple[i] = (PolyX[j] - PolyX[i]) / (PolyY[j] - PolyY[i]);
        //        }
        //        j = i;
        //    }
        //}

        public override int GetHashCode()
        {
            return Name.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            return obj is Polygon && Equals((Polygon)obj);
        }

        public bool Equals(Polygon other)
        {
            if (ReferenceEquals(null, other))
                return false;

            if (ReferenceEquals(this, other))
                return true;

            return Name.Equals(other.Name);
        }

        public override string ToString()
        {
            return Name;
        }

        public static bool operator ==(Polygon a, Polygon b)
        {
            if ((Object)a == null)
            {
                throw new ArgumentNullException();
            }
            return a.Equals(b);
        }

        public static bool operator !=(Polygon a, Polygon b)
        {
            return !(a == b);
        }
    }
}
