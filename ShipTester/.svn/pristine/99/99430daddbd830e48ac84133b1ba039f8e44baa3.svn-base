using System;
using System.Globalization;
using ShipTester.Helper;
using ShipTester.Model;
using System.Collections.Generic;

namespace ShipTester
{
    public static class ShipTestProcessor
    {
        public static void Execute(IEnumerable<ShipTest> shipTests)
        {
            foreach (var shipTest in shipTests)
                Update(shipTest);
        }

        private static void Update(ShipTest shipTest)
        {
            //timestamp for when a ship first reports a position inside the harbor
            shipTest.CanalEntryTimestamp = MarkShipEvent(shipTest);

            //only tracking ships that report as underway
            if (shipTest.NavigationalStatus == NavigationalStatus.Underway)
            {
                //for ships inside the Duluth Harbor
                if (shipTest.Position.Longitude < -92.00000 && shipTest.CanalEntryTimestamp != null)
                {
                    //if ship is in St. Louis Bay, we treat it differently than if it is anywhere else in the harbor
                    if (IsBoatInStLouisBayZone(shipTest))
                    {
                        DeriveEtaFromStLouisBay(shipTest);
                    }
                    else
                    {
                        NearestPort(shipTest);
                    }
                }
                //for ships outside the Duluth harbor
                else
                {
                    //distance (in miles) that a ship is from the lift bridge
                    //is the distance returned really in miles? Verify this.
                    var distanceToCanal =
                        shipTest.DirectDistanceToLiftBridge =
                            Helper.GeoHelper.DistanceBetweenCoord(ShipPositions.AerialLiftBridge, shipTest.Position);
                    if (distanceToCanal >= 50)
                    {
                        //update DerivedEta to reported Eta for ships over 50 miles away
                        shipTest.DerivedEta = shipTest.Eta;
                    }
                    else
                    {
                        //check if a ship is actually going to Duluth and update DerivedEta
                        NearestPort(shipTest);
                    }
                }
            }

            if (!shipTest.IsInDuluthSuperiorPort() &&
                //ship stated destination is Duluth and the heading is less than 90 degrees difference or
                (shipTest.Destination.Equals(Ports.Duluth) && shipTest.IsHeadingToward(shipTest.Destination)) ||
                //ship heading is less that 90 degrees from Duluth heading and more than 90 degrees from stated destination
                (shipTest.IsHeadingToward(Ports.Duluth) && !shipTest.IsHeadingToward(shipTest.Destination)))
                //then CanalETA populates as calculated
                shipTest.DuluthCanalETAResult = DuluthCanalETAResult.Calculated;

        }

        //returns the timestamp of when a ship first reports a position Inside Harbor. Timestamp is only set if there is
        //no timestamp. Timestamp is set to null as soon as the ship leaves.
        private static DateTime? MarkShipEvent(ShipTest shipTest)
        {
            if (GeoHelper.IsPointInPolygon(shipTest.Position, Areas.InsideHarbor) && shipTest.CanalEntryTimestamp == null)
            {
                shipTest.CanalEntryTimestamp = DateTime.Now;
            }
            else
            {
                shipTest.CanalEntryTimestamp = null;
            }
            return shipTest.CanalEntryTimestamp;
        }

        //returns boolean InStLouisBayZone
        private static bool IsBoatInStLouisBayZone(ShipTest shipTest)
        {
            bool InStLouisBayZone = GeoHelper.IsPointInPolygon(shipTest.Position, Areas.StLouisBay);
            return InStLouisBayZone;
        }

        //returns DerivedEta of a ship in St. Louis Bay
        private static void DeriveEtaFromStLouisBay(ShipTest shipTest)
        {
            //to calculate DerivedEta from SLuBay, 
            //first, calculate the direct distance to the canal and use it as the hypotenuse of a 30/60/90 triangle
            var directLineDistance =
                   Helper.GeoHelper.DistanceBetweenCoord(ShipPositions.AerialLiftBridge, shipTest.Position);
            //next, find lengths of the opposite and adjacent sides (convert angle to radians)
            var shipSideDistance = (directLineDistance * (Math.Sin(60 * Math.PI / 180)));
            var canalSideDistance = (directLineDistance * (Math.Cos(60 * Math.PI / 180)));
            //last, d=rt provides time to travel in hours
            var travelTime = (shipSideDistance + canalSideDistance) / shipTest.Speed;
            //send the travelTime to a method that converts it to a time
            DeriveShipEta(shipTest, travelTime);
        }

        //evaluates ship headings for nearest port
        private static void NearestPort(ShipTest shipTest)
        {
            CompareHeadingToAllKnownPorts(shipTest);
            //order the list from least change to most change - Superior, Duluth, Two Harbors, Silver Bay

            //var portDiff = nearest port 1 - next nearest port 2
            //if(reported heading is within 2/3(portDiff && port = Duluth){

                var travelTime = Helper.GeoHelper.DistanceBetweenCoord(ShipPositions.AerialLiftBridge, shipTest.Position);
                DeriveShipEta(shipTest, travelTime);

            //}
        }

        //returns an ordered list of nearest ports to NearestPorts()
        private static List<string> CompareHeadingToAllKnownPorts(ShipTest shipTest)
        {
            var portList = new List<string>();

            return portList;
        }

        //returns DerivedEta of ship outside harbor that we believe is heading to Duluth
        public static DateTime? DeriveShipEta(ShipTest shipTest, Double travelTime)
        {
            //use time (in hours) added to current time and account for data lag (4 minutes)
            double total = travelTime + .067;
            DateTime dateTime = DateTime.Now;
            shipTest.DerivedEta = dateTime.AddHours(total);

            return shipTest.DerivedEta;
        }
    }
}