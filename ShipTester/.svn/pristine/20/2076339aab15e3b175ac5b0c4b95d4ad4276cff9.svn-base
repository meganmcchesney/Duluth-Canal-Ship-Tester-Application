using ShipTester.Model;
using System.Collections.Generic;

namespace ShipTester
{
    public static class ShipTestProcessor
    {
        public static void Execute(IEnumerable<ShipTest> shipTests)
        {
            foreach (var shipTest in shipTests)
                Update(shipTest);
        }

        private static void Update(ShipTest shipTest)
        {

/*Define 4 zones:
1. InsideHarborZone
2. StLouisBayZone
3. DuluthCanalZone
4. SuperiorCanalZone

add (3) fields to ship table:
1. shipEvent = entered/exited  (string)
2. shipEventLocation = DuluthCanalZone/SuperiorCanalZone (string)
3. shipEventTimestamp = TimeStamp

when ship passes through a canal with SE heading, shipEvent = entered
when ship passes through a canal with NW heading, shipEvent = exited

private static void Update(ShipTest shipTest)
{

	foreach (ship in shipTest){
		if (ship.navigationalStatus = "underway using engine"){
			if (ship inside harbor){
				for every ship where shipEvent = entered
				if (ship in StLouisBayZone){
					deriveStLouisBayZoneETA()
				} 
				else 
				{
				 	checkShipHeading()
				}
			}
			else (ship outside harbor){

				var distanceToCanal = DistanceBetweenCoord(double destLat, double destLong, double currLat, double currLong, double radius = EarthRadiusMiles)

				if (distanceToCanal >= 50 miles){
					derivedETA = reported ETA 
				} 
				else (distanceToCanal < 50 miles) 
				{
					DeriveShipDestination()
				}
			}
		}
	}
}


//calculation for ship in st. louis bay zone to duluth canal.
//derivedETA should increase line of sight ETA by a factor based on current heading vs. needed heading
deriveStLouisBayZoneETA()

//Once a ship in StLouisBayZone changes heading such that heading is nearer to superior than duluth canal, 
//derivedETA is no longer calculated
checkShipHeading()

//weight ship destination with derived heading to infer ship course.
deriveShipDestination(){
	var portDiff = nearest port 1 - next nearest port 2
	if(reported heading is within 2/3(portDiff){
		deriveShipEta(nearest port 1)

		if(nearest port 1 = Duluth){
			save derivedETA
		}
	}
	else
	{
		deriveShipEta(next nearest port 2)

		if(next nearest port 2 = Duluth){
		save derivedETA
		}
	}
}


//calculate derivedETA according to distance and speed
deriveShipEta(Port port)
            */





            if (!shipTest.IsInDuluthSuperiorPort() &&
                //ship stated destination is Duluth and the heading is less than 90 degrees difference or
                (shipTest.Destination.Equals(Ports.Duluth) && shipTest.IsHeadingToward(shipTest.Destination)) ||
                //ship heading is less that 90 degrees from Duluth heading and more than 90 degrees from stated destination
                (shipTest.IsHeadingToward(Ports.Duluth) && !shipTest.IsHeadingToward(shipTest.Destination)))
                //then CanalETA populates as calculated
                shipTest.DuluthCanalETAResult = DuluthCanalETAResult.Calculated;

            // miles ship is from the lift Bridge.
            shipTest.DirectDistanceToLiftBridge = Helper.GeoHelper.DistanceBetweenCoord(ShipPositions.AerialLiftBridge, shipTest.Position);
        }
    }
}
